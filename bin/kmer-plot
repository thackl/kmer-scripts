#!/usr/bin/env bash
# Version 0.3.1
# Author: Thomas Hackl - thackl@lim4.de

usage(){
cat <<EOF
Usage:
  kmer-plot MODE ...

Plot kmer distributions either from jellyfish histos oder hashes.
MODEs:
  kcov         coverage-frequency distribution of kmers (with peak calling)
  gcmx         coverage-frequency-gc as heatmap; reads KAT gcp tables;
  gccov        length-gc-coverage of contigs in blobology like plot
  seqcov       coverage along a sinle sequence
  kcov-legacy  like kcov, but no ggplot and different peak calling approach
EOF

exit 0;
}

check_bin(){
    hash $1 || { echo "$1 required in PATH" >&2; exit 1;}
}

Rrun(){
    FUN=$1;
    shift;

    # quote some strings etc
    #http://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash <- bad bash regex
    #http://stackoverflow.com/questions/13790763/bash-regex-to-check-floating-point-numbers-from-user-input
    OPTS=""
    for OPT in "$@"; do
        VAL=${OPT#*=};
        if [ ${#OPT} -gt ${#VAL} ]; then
            KEY=${OPT%%=*};
            if ! ([[ $VAL =~ ^[-+]?[0-9]+\.?[0-9]*$ ]] || [[ $VAL =~ ^(TRUE|FALSE|NA|NULL)$ ]] ); then
                VAL='"'$VAL'"';
            fi
            OPTS="$OPTS, $KEY=$VAL";
        else
            OPTS="$OPTS, "'"'"$OPT"'"';
        fi;
    done;

    OPTS=${OPTS:2};
    echo "$OPTS";
    #echo "$@"; exit;

    R --vanilla --slave -e "source('$BIN/../R/kmer.R'); $FUN($OPTS)";
}


##- MAIN ---------------------------------------------------------------------##
## prep
[[ $# -eq 0 ]] && usage;
SCRIPT=$(basename "$0");
MODE=$1;
shift;
[[ $MODE == "-"* ]] && echo "mode required" && usage;

# Execute getopt
ARGS=`getopt --name "$SCRIPT" \
    --options "o:ghV" \
    -- "$@"`

#Bad arguments
[ $? -ne 0 ] && exit 1;

# A little magic
eval set -- "$ARGS"

OUT="kmer-plot-$MODE.pdf";
USEGGPLOT=FALSE
HELP=0;

# Now go through all the options
while true; do
    case "$1" in
        -h)
            HELP=1;
            shift;;
        -V)
            grep -m1 'Version' "$0" | sed 's/.*Version\s*//';
            exit 0;;
        --)
            shift
            break;;
        *)
            echo "$1: Unknown option" 1>&2 && exit 1;;
    esac
done



## prep
if [[ $# -eq 0 || $HELP -gt 1 ]]; then
    echo "help missing" && exit 0;
fi;

check_bin Rscript;
check_bin jellyfish;

BIN="$(dirname "$(readlink -f "$0")")"

case "$MODE" in
    kcov|gcmx|gccov|seqcov)
        Rrun $MODE $@;;
    kcov-legacy)
        Rrun kmerPlot $@;;
    *)
        echo "unknown mode: $MODE" 1>&2 && usage;;
esac
