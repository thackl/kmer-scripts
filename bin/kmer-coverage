#!/usr/bin/env perl
use warnings;
use strict;

use Pod::Usage;
use Getopt::Long qw(:config no_ignore_case);
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;
use File::Temp 'tempdir';
use List::Util;

use Kmer;
use Jellyfish;
use Fasta::Parser;
use Fastq::Parser;
use Handy;

use threads;
use Thread::Queue;

use Data::Dumper;

our $VERSION = "0.5.4";

=head1 NAME

kmer-coverage

=head1 AUTHOR

Thomas Hackl - S<thackl@lim4.de>

=head1 SYNOPSIS

  $ pv <READS.f[aq]> | kmer-coverage -j <JELLYFISH HASH>  > READS.cov

=head1 OPTIONS

=over 25

=item -j|--jf=<file>

Path to the jellyfish kmer hash file.

=item -L|--no-load [OFF]

Disable preloading of hash into memory, recommended for small queries or
subsequent runs on same hash (already mapped to memory).

=item -A|--no-adjust

Omit computation of adjusted scores (output will only contain 4 columns)

=item -a|--jfa

By default, adjustment hash is computed on the fly from input. Use this to
specify precomputed adjustment hash.

=item max-refine-exact [10000]

Omit exact peak refinement for coverage greater than this value. Exact
refinement is slow for large values and the heuristic already guarantees a count
within +- standard deviation of the refined value. This is usually precise enough.

=item -l|min-length [1000]

Omit sequences shorter than this from analysis/output. They will be included in
adjustment hash computation, though.

=item [--help]

Show help

=item [--debug]

=back

Output: one line per read, 6 fields:
  1) id
  2) adjusted representative count
  3) adjusted median count
  4) representative count
  5) median count
  6) per base count, space separated

  read1   110   120   240   280    1034 1223 1212 1234 1002 878 676 424 ...
  read2   52    56    52    56     68 54 48 44 56 ...

=head1 CODE

=cut

my %opt = init();
my $L = $opt{logger};

my $fp;
my $is_fastq;
# try fastq;
if($fp = Fastq::Parser->new(fh => $opt{ifh})->check_format){
    $is_fastq = 1;
}elsif($fp = Fasta::Parser->new(fh => $opt{ifh})->check_format){
    $is_fastq = 0;
}else{
    $L->logdie("--in $opt{in} neither FASTQ nor FASTA");
}

# in thread and with $jf->get_kmer_size
# auto-detect hash kmer size
#my $jf_info = $jf->run(['info', '--json', $opt{'jf'}]);
#$jf_info =~ m/"key_len" : (\d+)/s;
#$opt{'kmer_size'} = $1/2;

# load hash
unless ($opt{no_load}) {
    $L->info("loading jellyfish hash");
    qx(cat $opt{jf} > /dev/null);
}

my $Qw = Thread::Queue->new();
my $Qo = Thread::Queue->new();

my $tmp = tempdir(
    "kmer-coverage-XXXXXX",
    DIR => $opt{tmp},
    CLEANUP => $opt{keep} ? 0 : 1,
);

my $jf = Jellyfish->new();
my $ks = $jf->get_kmer_size($opt{jf});
my $kh = Kmer->new(kmer_size => $ks);

if (! $opt{no_adjust}) {
    if ($opt{jfa}) {
        $L->logdie("Cannot find adjustment hash: $opt{jfa}") unless -f $opt{jfa};
        my $ksa = $jf->get_kmer_size($opt{jfa});
        $L->logdie("Cannot use adjustment hash with kmer size ($ksa) different from data hash ($ks)") unless $ks == $ksa;
        $L->info("using precomputed hash $opt{jfa}");
    }else {
        $L->info("computing adjustment hash");
        qx(jellyfish count -C -t $opt{threads} -s 10M -m $ks -o $tmp/adjust.jf $opt{in});
        $opt{jfa} = "$tmp/adjust.jf";
    }
}


my @thread_worker = map{
    threads->create(\&thread_worker)
} 1..$opt{threads};
# launch output thread
my $thread_out = threads->create(\&thread_out);

$L->info("processing sequences");
my $i=-1;
while(1){
    if ( $Qw->pending > $opt{threads}+2){
        sleep 1; next;
    };

    $L->debug("# pending: ", $Qw->pending,"\n");
    my @fbin;
    my $flen = 0;
    my $eof = 1;
    while (my $fs = $fp->next_seq){
        my $fl = length($fs->seq);
        next unless $fl > $opt{min_length};
        push @fbin, $fs;
        $flen += $fl;
        if ($flen > $opt{chunk_size}){
            $eof=0;
            last;
        }
    }

    $L->debug("# chunk: ".@fbin." $flen $opt{chunk_size}\n");
    $Qw->enqueue(++$i, \@fbin);
    last if $eof; # eof
}

# all jobs submitted
# $Qw->end; only works with very recent Thread::Queue

my @term = (undef) x ($opt{threads}*2);
$Qw->enqueue(@term);

$_->join for @thread_worker;

# all workers done, close Result queue;
# $Qo->end; # only works with very recent Thread::Queue

@term = (undef) x 2;
$Qo->enqueue(@term);

$thread_out->join;

$L->info("done");

##- Methods ------------------------------------------------------------------##

=head1 Methods

=cut

sub output_job{
    my ($covs) = @_;
    foreach my $k ( @$covs) {
        print $k,"\n";
    }
}



## methods
sub thread_worker{
    my $tid = threads->tid();
    $L->debug("# launched t$tid\n");
    my $tfa = "$tmp/$tid.fa";

    while (1){
        my ($j, $fbin) = $Qw->dequeue(2);
        return unless defined $j; # no more work

        my @knum;
        open(TMP, '>', $tfa) or die $!;
        foreach my $fs (@$fbin) {
            my $bad_mers = 0;
            foreach ( $kh->kmerize($fs->{seq}) ){
                $bad_mers++ if tr/ATGC//c;
            };
            print TMP $fs->string();
            push @knum, length($fs->seq) - $ks + 1 - $bad_mers;
        }
        close TMP;

        $L->debug("# t$tid j$j\n");
        # process $c
        my @covs;
        if (! $opt{no_adjust}) {
            open(JF, "jellyfish query -s $tfa $opt{jf} | cut -d' ' -f2 |") or die $!;
            open(JFA, "jellyfish query -s $tfa $opt{jfa} | cut -d' ' -f2 |") or die $!;
            for (my $j=0; $j<@knum; $j++) {
                my $cts = '';
                my $cas = '';
                my %ctmed;
                my %camed;
                for (my $i=0; $i<$knum[$j]; $i++) {
                    my $ct = <JF>;
                    if (! defined $ct) {
                        print STDERR "expected mers: $knum[$j]\n";
                        print STDERR "seq num: ".($j+1)."\n";
                        print STDERR "fasta: $tfa\n";
                        exit;
                    }
                    my $cr = <JFA>;
                    chomp($ct);
                    chomp($cr);
                    next unless $cr; # 0 count derives from Ns
                    my $ca = int(($ct/$cr)+.5);
                    $ctmed{$ct}++;
                    $camed{$ca}++;
                    $cts.= $ct." ";
                    $cas.= $ca." ";
                }
                chop($cts);
                chop($cas);
                push @covs, $fbin->[$j]->id()."\t".
                    hist_repr_anscombe(\%camed)."\t".
                    hist_med(\%camed)."\t".
                    hist_repr_anscombe(\%ctmed)."\t".
                    hist_med(\%ctmed)."\t".
                    $cts."\t".
                    $cas;
            }
            close JF;
            close JFA;
        } else {
            open(JF, "jellyfish query -s $tfa $opt{jf} | cut -d' ' -f2 |") or die $!;
            for (my $j=0; $j<@knum; $j++) {
                my $cs = '';
                my %cmed;
                for (my $i=0; $i<$knum[$j]; $i++) {
                    my $c = <JF>;
                    chomp($c);
                    $cmed{$c}++;
                    $cs.=$c." ";
                }
                chop($cs);
                push @covs, $fbin->[$j]->id()."\t".
                    hist_repr_anscombe(\%cmed).
                    hist_med(\%cmed)."\t".
                    "\t".$cs;
            }
            close JF;
        }

        # enqueue result
        $Qo->enqueue($j, \@covs);
    }
}


sub thread_out{
    my $tid = threads->tid();
    my %buf;
    my $jout = 0;
    while (1){
        my ($j, $c) = $Qo->dequeue(2);
        unless (defined $j){ # no more work
            # emtpy buffer
            die "Incomplete output from threads\n" if %buf;
            last;
        }

        $L->debug("# $c $j ($jout)\n");

        if ($j == $jout) {
            output_job($c, $j);
            while (exists $buf{++$jout}) { # look ahead in buffer
                output_job($buf{$jout}, $jout, 1);
                delete $buf{$jout};
            }
        }else {
            $buf{$j} = $c;
        }
    }
}



=head2 init

=cut

sub init{
    no warnings 'qw';

    my (%p) = @_;

    # GetOptions
    my $argv = join(" ", @ARGV);

    # logger
    Log::Log4perl->init( \(q(
        log4perl.rootLogger                     = INFO, Screen
        log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
        log4perl.appender.Screen.stderr         = 1
        log4perl.appender.Screen.layout         = PatternLayout
        log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [kmer-coverage] %m%n)));

    my %def = ();
    my %opt = (
        threads => 1,
        tmp => (-d '/dev/shm' ? '/dev/shm' : '/tmp'),
        chunk_size => 5_000_000,
        max_refine_exact => 10_000,
        min_length => 1000,
    );
    my $L = $opt{logger} = Log::Log4perl->get_logger();

    GetOptions(
        \%opt, qw(
                     jf|j=s
                     in|reads=s
                     tmp=s
                     keep!
                     jfa|a=s
                     min_length|min-length|l=i
                     no_adjust|no-adjust|A!
                     no_load|no-load|L!
                     max_refine_exact|max-refine-exact=i
                     threads|t=i
                     version|V!
                     debug|D!
                     help|h!
             )
    ) or $L->logdie('Failed to "GetOptions"');

    $opt{argv} = $argv; # store it just in case

    # help
    $opt{help} && pod2usage(1);

    # version
    if ($opt{version}) {
        print"$VERSION\n";
        exit 0;
    }

    $opt{in} = @ARGV ? shift @ARGV : '-';

    $L->logdie("unused argument: @ARGV") if @ARGV;

    %opt = (%def, %opt);

    # required stuff
    for (qw(jf in)) {
        if (ref $opt{$_} eq 'ARRAY') {
            pod2usage("required: --$_") unless @{$opt{$_}}
        } else {
            pod2usage("required: --$_") unless defined ($opt{$_})
        }
    }

    Handy::require_exe("jellyfish") or $L->logdie("jellyfish not in PATH");

    if ($opt{in} ne '-') {
        open($opt{ifh}, '<', $opt{in}) or $L->logdie("$opt{in}: $!");
    } else {
        $L->info("reading STDIN");
        $opt{in} = \*STDIN;
    }
    # debug level
    $L->level($DEBUG) if $opt{debug};
    $L->debug('Verbose level set to DEBUG');

    $L->debug(Dumper(\%opt));

    return %opt;
}



sub hist_med{
    my ($h) = @_;
    my @k = sort {$a <=> $b} keys %$h;
    my $tot_sum = 0;
    $tot_sum += $_ for values %$h;
    my $med_sum = $tot_sum/2;

    my $cum_sum = 0;
    my $med;

    foreach my $k (@k) {
        $cum_sum += $h->{$k};
        if ($cum_sum > $med_sum){
            $med = $k;
            last;
        }
    }
    return $med || 0;
}


=head

First hist is transformed and approximately aggregated into a discrete hist in
anscombe space (anscombe: poisson -> gauss, sd=sqrt(mean) -> sd=1). The max of
this hist represents a +-1 anscombe space approximation of the untransformed
poisson max, which is would require expensive computation with adative sliding
window to account for mean~variance dependency.

=cut

sub hist_repr_anscombe{
    my ($h) = @_;

    # anscombe transform, aggregate
    my %ansc;
    my $max = -1;
    my $ansc_max = -1;
    foreach my $k (keys %$h){
        my $ka = int(anscombe($k)+.5);
        $ansc{$ka}+= $h->{$k} || 0;
        $ansc_max = $ka if $ka > $ansc_max;
        $max = $k if $k > $max;
    }

    my $kmax_ansc = -1;
    my $vmax_ansc = -1;
    while (my ($k, $v) = each %ansc) {
        if ( $v > $vmax_ansc) {
            $kmax_ansc = $k;
            $vmax_ansc = $v;
        }
    }

    # true max should be in +-1 anscombe space bin
    my $kmax_approx = int(anscombe_inv($kmax_ansc));
    # running exact peak is slow for high cov and usually not necessary

    return $kmax_approx if $kmax_approx > $opt{max_refine_exact};

    my $kmax_approx_min = int(anscombe_inv($kmax_ansc-1)+.5);
    my $kmax_approx_max = int(anscombe_inv($kmax_ansc+1)+.5);

    my $sd = int(sqrt($kmax_approx)); # assume approx constant sd for range of kmax
    my $sd_min = $kmax_approx_min-$sd;
    $sd = 0 if $sd_min < 0;
    my $sd_max = $kmax_approx_max+$sd;
    $sd = $max if $sd_max > $max;


    # init z for first window
    my $z = 0;
    for (my $i = $sd_min; $i < $sd_min+($sd*2); $i++) {
        next unless exists $h->{$i};
        $z += $h->{$i};
    }

    my $vx = $z;
    my $kx = $sd_min+$sd;

    # slide and cache max
    for (my $i = $sd_min+($sd*2); $i <= $sd_max; $i++) {
        $z-= $h->{($i-($sd*2))} if exists $h->{$i-($sd*2)};
        $z+= $h->{$i} if exists $h->{$i};
        if ($z > $vx){ # update max
            $kx = $i-$sd;
            $vx = $z;
        }
    }
    
    return $kx;
}

=head2 anscombe / anscombe_inv

Anscombe transform x.

=cut

sub anscombe{
    2 * sqrt($_[0] + 3/8)
}

sub anscombe_inv{
    ($_[0]/2)**2 - 3/8
}



sub hist_repr{
    #return 0;
    my ($h) = @_;
    my $max = List::Util::max(keys %$h);
    print STDERR "$max\n";
    my $kx = -1;
    my $vx = -1;
    for (my $i=0; $i<=$max; $i++) {
        my $sd = int(sqrt($i));
        my $sd_min = $i-$sd;
        $sd = 0 if $sd_min < 0;
        my $sd_max = $i+$sd;
        $sd = $max if $sd_max > $max;

        my $z = List::Util::sum(map{$_ || 0}@{$h}{$sd_min..$sd_max}); # make undef -> 0
        if ($z > $vx){ # update max
            $kx = $i;
            $vx = $z;
        }
    }
    return $kx;
}
